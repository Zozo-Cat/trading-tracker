generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

/// === NextAuth standardtabeller ===
model User {
  id            String             @id @default(cuid())
  name          String?
  email         String?            @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String?
  accounts      Account[]
  memberships   ServerMembership[]
  sessions      Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Server {
  id             String             @id @default(cuid())
  serverId       String             @unique
  name           String
  joinCode       String
  discordGuildId String?
  ownerDiscordId String?
  ownerUserId    String?
  createdAt      DateTime           @default(now())
  memberships    ServerMembership[]
  teams          Team[]
}

model ServerMembership {
  id            String     @id @default(cuid())
  serverId      String
  userId        String?
  userDiscordId String?
  role          ServerRole
  createdAt     DateTime   @default(now())
  user          User?      @relation(fields: [userId], references: [id])
  server        Server     @relation(fields: [serverId], references: [id])

  @@unique([serverId, userId])
  @@unique([serverId, userDiscordId])
}

model Team {
  id        String   @id @default(cuid())
  teamId    String   @unique
  name      String
  joinCode  String
  serverId  String
  createdAt DateTime @default(now())
  server    Server   @relation(fields: [serverId], references: [id])
}

enum ServerRole {
  SERVER_ADMIN
  SERVER_MEMBER
}
